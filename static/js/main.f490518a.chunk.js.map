{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeHandler","event","setState","item","target","value","submitHandler","preventDefault","newList","concat","toConsumableArray","state","itemList","react_default","a","createElement","className","Container","fluid","App_Form","App_List","React","Component","Form","onSubmit","required","type","name","placeholder","onChange","index_es","icon","faPlusCircle","size","List","length","map","i","key","faMinusCircle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SASMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,cAAgB,SAAAC,GACdR,EAAKS,SAAS,CACZC,KAAMF,EAAMG,OAAOC,SARJZ,EAWnBa,cAAgB,SAAAL,GACdA,EAAMM,iBACN,IAAIC,EAAO,GAAAC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAOD,EAAKkB,MAAMC,UAAlB,CAA4BnB,EAAKkB,MAAMR,OAClDV,EAAKS,SAAU,CACbU,SAAUJ,KAbZf,EAAKkB,MAAQ,CACXC,SAAU,IAHKnB,wEAoBnB,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,OAAK,GACdL,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACI,EAAD,CAAMnB,cAAeJ,KAAKI,cACpBM,cAAeV,KAAKU,gBAC1BO,EAAAC,EAAAC,cAACK,EAAD,CAAMR,SAAUhB,KAAKe,MAAMC,oBA5BlBS,IAAMC,WAoClBC,EAAO,SAAA/B,GACX,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMS,SAAUhC,EAAMc,eAClBO,EAAAC,EAAAC,cAAA,SAAOU,UAAQ,EACfC,KAAK,OAAOV,UAAU,UAAUW,KAAK,OAAOC,YAAY,eACxDC,SAAUrC,EAAMQ,cAAeK,MAAOb,EAAMW,OAE5CU,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASU,KAAK,UAASb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAiBC,KAAMC,IAAchB,UAAU,MAAMiB,KAAK,WAO3GC,EAAO,SAAA1C,GAAK,OACdA,EAAMoB,SAASuB,OAAS,EAAI3C,EAAMoB,SAASwB,IAAI,SAACjC,EAAMkC,GAAP,OAC3CxB,EAAAC,EAAAC,cAAA,OAAKuB,IAAKD,GACNxB,EAAAC,EAAAC,cAAA,SAAOW,KAAK,aACZb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsBb,EACpBU,EAAAC,EAAAC,cAAA,UACAC,UAAU,gBAAeH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAiBd,UAAU,SAASe,KAAMQ,IAAeN,KAAK,SACvFpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAGxBH,EAAAC,EAAAC,cAAA,wCAGWxB,IC7DKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,WAAP,KACElC,EAAAC,EAAAC,cAACiC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.f490518a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faPlusCircle} from '@fortawesome/free-solid-svg-icons';\r\nimport {faMinusCircle} from '@fortawesome/free-solid-svg-icons';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      itemList: [],\r\n    }\r\n  }\r\n  changeHandler = event => {\r\n    this.setState({\r\n      item: event.target.value\r\n    })\r\n  }\r\n  submitHandler = event => {\r\n    event.preventDefault()\r\n    let newList = [...this.state.itemList, this.state.item]\r\n    this.setState ({\r\n      itemList: newList,\r\n    })\r\n  }\r\n\r\n  render() { //Main\r\n  return (\r\n    <div className=\"App\">\r\n      <Container fluid>\r\n        <h1> To-Do List </h1>\r\n        <hr/><br/>\r\n         <Form changeHandler={this.changeHandler}\r\n               submitHandler={this.submitHandler}/>\r\n         <List itemList={this.state.itemList} />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n};\r\n\r\n//Form component\r\nconst Form = props => {\r\n  return(\r\n      <div>\r\n          <form onSubmit={props.submitHandler}>\r\n              <input required\r\n              type=\"text\" className=\"addItem\" name=\"item\" placeholder=\"Add an item!\" \r\n              onChange={props.changeHandler} value={props.item}\r\n              />\r\n              <button className=\"button\" type=\"submit\"><FontAwesomeIcon icon={faPlusCircle} className=\"add\" size=\"2x\"/></button>\r\n          </form>\r\n      </div>\r\n  )\r\n}\r\n\r\n//List component\r\nconst List = props => ( //functional component\r\n    props.itemList.length > 0 ? props.itemList.map((item, i) => ( //if list isn't empty, display w checkbox\r\n        <div key={i}>\r\n            <input type=\"checkbox\"/>\r\n            <p className=\"item\"> {item} \r\n              <button \r\n              className=\"removeButton\"><FontAwesomeIcon className=\"remove\" icon={faMinusCircle} size=\"xs\"/></button></p>\r\n              <hr className=\"itemSplit\"/>\r\n        </div>\r\n    )) : //else\r\n    <h3>List is currently empty! </h3> //display this instead\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}