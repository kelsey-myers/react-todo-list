{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeHandler","event","setState","item","target","value","submitHandler","preventDefault","newList","concat","toConsumableArray","state","itemList","react_default","a","createElement","className","Container","fluid","App_Form","App_List","React","Component","Form","onSubmit","type","name","placeholder","onChange","index_es","icon","faPlusCircle","size","List","length","map","i","key","faMinusCircle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SASMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,cAAgB,SAAAC,GACdR,EAAKS,SAAS,CACZC,KAAMF,EAAMG,OAAOC,SARJZ,EAWnBa,cAAgB,SAAAL,GACdA,EAAMM,iBACN,IAAIC,EAAO,GAAAC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAOD,EAAKkB,MAAMC,UAAlB,CAA4BnB,EAAKkB,MAAMR,OAClDV,EAAKS,SAAU,CACbU,SAAUJ,KAbZf,EAAKkB,MAAQ,CACXC,SAAU,IAHKnB,wEAmBnB,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,OAAK,GACdL,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACI,EAAD,CAAMnB,cAAeJ,KAAKI,cACpBM,cAAeV,KAAKU,gBAC1BO,EAAAC,EAAAC,cAACK,EAAD,CAAMR,SAAUhB,KAAKe,MAAMC,oBA3BlBS,IAAMC,WAmClBC,EAAO,SAAA/B,GACX,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMS,SAAUhC,EAAMc,eAClBO,EAAAC,EAAAC,cAAA,SACAU,KAAK,OAAOT,UAAU,UAAUU,KAAK,OAAOC,YAAY,eACxDC,SAAUpC,EAAMQ,cAAeK,MAAOb,EAAMW,OAE5CU,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASS,KAAK,UAASZ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAiBC,KAAMC,IAAcf,UAAU,MAAMgB,KAAK,WAO3GC,EAAO,SAAAzC,GAAK,OACdA,EAAMoB,SAASsB,OAAS,EAAI1C,EAAMoB,SAASuB,IAAI,SAAChC,EAAMiC,GAAP,OAC3CvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKD,GACNvB,EAAAC,EAAAC,cAAA,SAAOU,KAAK,aACZZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsBb,EAAtB,IAA4BU,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAiBb,UAAU,SAASc,KAAMQ,IAAeN,KAAK,WAGlGnB,EAAAC,EAAAC,cAAA,wCAGWxB,ICzDKgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,WAAP,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.f2b5d2da.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faPlusCircle} from '@fortawesome/free-solid-svg-icons';\nimport {faMinusCircle} from '@fortawesome/free-solid-svg-icons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemList: [],\n    }\n  }\n  changeHandler = event => {\n    this.setState({\n      item: event.target.value\n    })\n  }\n  submitHandler = event => {\n    event.preventDefault()\n    let newList = [...this.state.itemList, this.state.item]\n    this.setState ({\n      itemList: newList,\n    })\n  }\n  render() { //Main\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <h1> To-Do List </h1>\n        <hr/><br/>\n         <Form changeHandler={this.changeHandler}\n               submitHandler={this.submitHandler}/>\n         <List itemList={this.state.itemList} />\n      </Container>\n    </div>\n  );\n};\n};\n\n//Form component\nconst Form = props => {\n  return(\n      <div>\n          <form onSubmit={props.submitHandler}>\n              <input \n              type=\"text\" className=\"addItem\" name=\"item\" placeholder=\"Add an item!\" \n              onChange={props.changeHandler} value={props.item}\n              />\n              <button className=\"button\" type=\"submit\"><FontAwesomeIcon icon={faPlusCircle} className=\"add\" size=\"2x\"/></button>\n          </form>\n      </div>\n  )\n}\n\n//List component\nconst List = props => ( //functional component\n    props.itemList.length > 0 ? props.itemList.map((item, i) => ( //if list isn't empty, display w checkbox\n        <div key={i}>\n            <input type=\"checkbox\"/>\n            <p className=\"item\"> {item} <FontAwesomeIcon className=\"remove\" icon={faMinusCircle} size=\"xs\"/></p>\n        </div>\n    )) : //else\n    <h3>List is currently empty! </h3> //display this instead\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}